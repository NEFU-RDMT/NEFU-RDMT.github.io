#include <stdio.h>
#include <stdlib.h>
#define LEN sizeof(struct Link_Node)
typedef int Link_Type;
typedef struct Link_Node
{
    Link_Type data;
    struct Link_Node * next;
} node;
//typedef struct Link_Node node;

void input(struct Link_Node *p)
{
    scanf("%d",&p->data);
}
void CreateLinkHead(struct Link_Node *pHead,int n)
{
    //add to the head of the link
    int i;
    struct Link_Node *pNew;
    if(pHead==NULL) return ;
    for(i=0; i<n; i++)
    {
        pNew=(struct Link_Node * )malloc(LEN);
        if(pNew==NULL) exit(1);
        input(pNew);
        pNew->next=pHead->next;
        pHead->next=pNew;

    }
}

void CreateLinkTail(node *pHead,int n)
{
    if(pHead==NULL) return ;
    node *pTail,*pNew;
    int i;
    pTail=pHead;
    for(i=0; i<n; i++)
    {
        pNew=(node *)malloc(LEN);
        input(pNew);
        pNew->next=NULL;

        pTail->next=pNew;
        pTail=pNew;
    }
}
void output(node *p)
{
    printf("%d ",p->data);
}
void outputs(node *pHead)
{
    if(pHead==NULL || pHead->next==NULL) return ;
    node *p=pHead->next;
    while(p!=NULL)
    {
        output(p);
        p=p->next;
    }
    printf("\n");
}
int search(node *pHead,int a)
{
    if(pHead==NULL || pHead->next==NULL) return 0;
    node *p;
    p=pHead->next;
    while(p)
    {
        if(p->data==a) return 1;
        p=p->next;
    }
    return 0;
}
void update(node * pHead,int old,int xin)
{
    if(pHead==NULL || pHead->next==NULL) return ;
    node *p;
    p=pHead->next;
    while(p)
    {
        if(p->data==old) p->data=xin;
        p=p->next;
    }
}

void insert(node *pHead,node *pNew)
{
//从大到小
//printf("%d",pNew->data);
    if(pHead==NULL) return ;
    node *pLast=pHead,*p=pHead->next;


    if(pHead->next==NULL)
    {
        pHead->next=pNew;
        pNew->next=NULL;
    }
    else
    {
        while(p && p->data>pNew->data)
        {
            pLast=p;
            p=p->next;
        }
       // printf("%d\n",pLast->data);
        if(p!=NULL)
        {
            pNew->next=p;
            pLast->next=pNew;
        }
        else
        {
            pLast->next=pNew;
            pNew->next=NULL;
        }
    }


    //printf("%d",pNew->data);
}

void dele(node *pHead,int a)
{
    if(pHead==NULL || pHead->next==NULL) return ;
    node *pLast=pHead,*p=pHead->next;
    while (p)
    {
        if(p->data==a)
        {
            pLast->next=p->next;
            free(p);
            p=pLast->next;
        }
        else
        {
            pLast=p;
            p=p->next;
        }
    }
}

int main()
{
    int n,a,old,xin,i;
    struct Link_Node *pHead,*pNew;
    pHead=(struct Link_Node *) malloc(LEN);
    if(pHead==NULL) exit(1);
    pHead->next=NULL;
    scanf("%d",&n);
    //CreateLinkHead(pHead,n);
    CreateLinkTail(pHead,n);
    outputs(pHead);
    /*scanf("%d",&a);
    if(search(pHead,a)==1)
    dele(pHead,a);
    else
    printf("链表中没有元素a\n");
    outputs(pHead);
    scanf("%d%d",&old,&xin);
    if(search(pHead,old)==1)
    {
       update(pHead,old,xin);
    }else
    {
        printf("链表中没有元素a\n");
    }
    outputs(pHead);*/
     for(i=0;i<3;i++)
    {
        pNew=(node *)malloc(LEN);
        if(pNew==NULL) exit(1);
        scanf("%d",&pNew->data);
        //printf("%d",pNew->data);
        insert(pHead,pNew);
       // printf("%d",pNew->data);
    }


    outputs(pHead);


    return 0;
}
