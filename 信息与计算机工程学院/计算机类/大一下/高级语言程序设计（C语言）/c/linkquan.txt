#include <stdio.h>
#include <stdlib.h>
#define LEN sizeof(struct Link_Node)
typedef struct Link_Node
{
    int data;
    struct Link_Node *next;
} node;

void input(node * p)
{
    scanf("%d",&p->data);
}

void CreateLinkTail(node *pHead,int n)
{
    if(pHead==NULL) return;
    node *pNew,*pTail;
    int i;
    pTail=pHead;
    for(i=0; i<n; i++)
    {
        pNew=(node *)malloc(LEN);
        if(pNew==NULL) exit(1);
        input(pNew);

        pTail->next=pNew;
        pNew->next=NULL;
        pTail=pNew;
    }
}

int search(node *pHead,int a)
{
    if(pHead==NULL || pHead->next==NULL) return 0;
    node *p=pHead->next;
    while(p)
    {
        if(p->data==a) return 1;
        p=p->next;
    }
    return 0;

}
void update(node *pHead,int old,int xin)
{
    if(pHead==NULL || pHead->next==NULL) return ;
    node *p=pHead->next;
    while(p)
    {
        if(p->data==old) p->data=xin;
        p=p->next;
    }
}

void dele(node *pHead,int a)
{
    if(pHead==NULL || pHead->next==NULL) return ;
    node *pLast=pHead,*p=pHead->next;
    while(p)
    {
        if(p->data==a)
        {
            pLast->next=p->next;
            free(p);
            p=pLast->next;
        }
        else
        {
            pLast=p;
            p=p->next;
        }
    }
}
void CreateLinkHead(node *pHead,int n)
{
    if(pHead==NULL) return ;
    node *pNew;
    int i;
    for(i=0; i<n; i++)
    {
        pNew=(node *)malloc(LEN);
        if(pNew==NULL) exit(1);
        input(pNew);

        pNew->next=pHead->next;
        pHead->next=pNew;
    }

}

void insert(node *pHead,node *pNew)
{
    //getchar();
    if(pHead==NULL) return 0;
    if(pHead->next==NULL)
    {
        pHead->next=pNew;
        pNew->next=NULL;
        return;
    }
    node *pLast=pHead,*p=pHead->next;
    while(p && p->data>pNew->data)
    {
        pLast=p;
        p=p->next;
    }
    if(p==NULL)
    {
        pLast->next=pNew;
        pNew->next=NULL;
    }
    else
    {
        pNew->next=p;
        pLast->next=pNew;
    }

}
void clear(node *pHead)
{
    if(pHead==NULL) return;
    node * p;
    while(pHead!=NULL)
    {
        p=pHead->next;
        free(pHead);
        pHead=p;
    }



}

void outputs(node *pHead)
{
    if(pHead==NULL || pHead->next==NULL) return;
    node *p=pHead->next;
    while(p)
    {
        printf("%d ",p->data);
        p=p->next;
    }
    printf("\n");
}

void CreateLinkHead2(node *pHead)
{
    if(pHead==NULL) return ;
    node *pNew,s;

    for(; ; )
    {
        input(&s);
        if(s.data==0) return;

        pNew=(node *)malloc(LEN);
        if(pNew==NULL) exit(1);
        pNew->data=s.data;
        // input(pNew);
        if(s.data==0)
        {
            free(pNew);
            return;
        }

        pNew->next=pHead->next;
        pHead->next=pNew;
    }

}
int Length(node * pHead)
{
    int n=0;
    if(pHead==NULL || pHead->next==NULL) return n;
    node *p=pHead->next;
    while(p)
    {
        n++;
        p=p->next;
    }
    return n;
}

void sort(node *pHead)
{
    int t,i,j,n;
    node *pLast,*p;
    n=Length(pHead);
    if(n<=1) return ;
    for(i=0; i<n-1; i++)
    {
        pLast=pHead->next;
        p=pLast->next;
        for(j=0; j<n-i-1; j++)
        {
            if(pLast->data<p->data)
            {
                t=pLast->data;
                pLast->data=p->data;
                p->data=t;
            }
            pLast=p;
            p=p->next;
        }
    }

}

int main()
{
    int i,j,n,a,old,xin;
    node *pHead = (node *)malloc(LEN),*pNew;
    if(pHead==NULL) exit(1);
    pHead->next=NULL;
    scanf("%d",&n);
    CreateLinkTail(pHead,n);
    //CreateLinkHead(pHead,n);
    outputs(pHead);

    sort(pHead);
    outputs(pHead);




    /*scanf("%d",&a);
    if(search(pHead,a)==1)
    {
        dele(pHead,a);
    }
    else
    {
        printf("There is no node which value is equal to a\n");
    }
    outputs(pHead);
    scanf("%d%d",&old,&xin);
    if(search(pHead,old)==1)
    {
        update(pHead,old,xin);
    }
    else
        printf("There is no node which value is equal to a\n");
    outputs(pHead);
       }
      */
    /* for(i=0; i<n; i++)
     {
         pNew=(node * )malloc(LEN);
         if(pNew==NULL)exit(1);

         input(pNew);
         insert(pHead,pNew);
       //  outputs(pHead);
        // getchar();
     }
     outputs(pHead);*/

    clear(pHead);

    return 0;
}
