#include <stdio.h> 
#include <conio.h> 
#include <string.h> 
#include <malloc.h> 

#define NULL 0 
#define MAX_NUM 10000 
#define MAX 60 
int j=0; 



typedef int Status; 
typedef char **HuffmanCode; 



typedef struct{ 
unsigned int weight;
unsigned int parent,lchild,rchild; 
}HTNode,*HuffmanTree;


typedef struct{ 
HuffmanTree HT; 
char *c;
int longth;
HuffmanCode HC;
}Huffman; 


void Select(HuffmanTree HT,int end,int *s1,int *s2)
{ 
int i; 
int min1=MAX_NUM;
int min2;
for (i=1;i<=end;i++) 
{ 
if(HT[i].parent==0&&HT[i].weight<min1) 
{ 
*s1=i; 
min1=HT[i].weight; 
} 
} 
min2=MAX_NUM; 
for(i=1;i<=end;i++) 
{ 
if(HT[i].parent==0&&(*s1!=i)&&min2>HT[i].weight) 
{ 
*s2=i; 
min2=HT[i].weight; 
} 
} 
} 


Huffman HuffmanCoding(Huffman Hfm)
{ 
int i,n,m,s1,s2,start; 
int c,f; 
char *cd; 
n=Hfm.longth; 
if(n<=1) return Hfm; 
m=2*n-1; 

for(i=n+1;i<=m;++i) 
{ 
Select(Hfm.HT,i-1,&s1,&s2); 
Hfm.HT[s1].parent=i; 
Hfm.HT[s2].parent=i; 
Hfm.HT[i].lchild=s1; 
Hfm.HT[i].rchild=s2; 
Hfm.HT[i].weight=Hfm.HT[s1].weight+Hfm.HT[s2].weight; 
} 


Hfm.HC=(HuffmanCode)malloc((n+1)*sizeof(char *)); 
cd=(char *)malloc(n*sizeof(char)); 
cd[n-1]='\0';  
for(i=1;i<=n;++i) 
{ 
start=n-1; 
for(c=i,f=Hfm.HT[i].parent;f!=0;c=f,f=Hfm.HT[f].parent) 
{ 
if(c==Hfm.HT[f].lchild) cd[--start]='0'; 
else cd[--start]='1'; 
} 
Hfm.HC[i]=(char *)malloc((n-start)*sizeof(char)); 
strcpy(Hfm.HC[i],&cd[start]); 
} 
free(cd); 
return Hfm; 
} 


Huffman InputHuffman(Huffman Hfm) 
{ 
int i,n; 
printf("\n\n\t\t********************构造哈夫曼树*********************\n"); 
printf("\t字符以及它的权值，数据将保存到同名目录下的'hfmTree.dat'\n"); 
printf("请输入字符的个数: "); 
scanf("%d",&n); 
Hfm.HT=(HuffmanTree)malloc((2*n)*sizeof(HTNode)); 
Hfm.c=(char *)malloc((n+1)*sizeof(char)); 
for(i=1;i<=n;i++) 
{ 
printf("请输入字符\n: "); 
scanf("%s",&Hfm.c[i]); 
printf("请输入他的权值\n: "); 
scanf("%d",&Hfm.HT[i].weight); 
Hfm.HT[i].parent=0; 
Hfm.HT[i].lchild=0; 
Hfm.HT[i].rchild=0; 
} 
for(;i<=2*n-1;++i) 
{ 
Hfm.HT[i].weight=0; 
Hfm.HT[i].parent=0; 
Hfm.HT[i].lchild=0; 
Hfm.HT[i].rchild=0; 
} 
Hfm.longth=n; 
return Hfm; 
} 


Huffman InitHuffman(Huffman Hfm)
{ 
int n,i; 
FILE *fp; 
fp=fopen("hfmTree1.dat","rt"); 
if(fp==NULL) 
{ 
Hfm=InputHuffman(Hfm); 
fp=fopen("hfmTree1.dat","wt"); 
fprintf(fp,"%d\n",Hfm.longth);
 
for(i=1;i<=Hfm.longth;i++) 
fprintf(fp,"%c %d",Hfm.c[i],Hfm.HT[i].weight); 
rewind(fp); 
} 

else 
{ 
fscanf(fp,"%d\n",&n); 
Hfm.c=(char *)malloc((n+1)*sizeof(char)); 
Hfm.HT=(HuffmanTree)malloc((2*n)*sizeof(HTNode)); 
for(i=1;i<=n;i++) 
fscanf(fp,"%s %d",&Hfm.c[i],&Hfm.HT[i].weight); 
for(i=1;i<=n;i++) 
{ 
Hfm.HT[i].parent=0; 
Hfm.HT[i].lchild=0; 
Hfm.HT[i].rchild=0; 
} 
for(;i<=2*n-1;++i) 
{ 
Hfm.HT[i].weight=0; 
Hfm.HT[i].parent=0; 
Hfm.HT[i].lchild=0; 
Hfm.HT[i].rchild=0; 
} 
Hfm.longth=n; 
} 
fclose(fp); 
Hfm=HuffmanCoding(Hfm); 
return Hfm; 
} 


void Output(Huffman Hfm) 
{ 
int i,n; 
n=Hfm.longth;
FILE *fpp;
printf("\n******************编码规则****************\n"); 
if(fpp=fopen("TreePrint.dat","wt"))
{for(i=1;i<=n;i++) 
{ 
printf("\n"); 
printf("字符: %c\t",Hfm.c[i]); 
printf("权值: %d\t",Hfm.HT[i].weight); 
printf("对应的哈夫曼编码: "); 
puts(Hfm.HC[i]); 
fprintf(fpp,"%s",Hfm.HC[i]); 
}
}
 
printf("\n*****************哈夫曼树****************\n"); 
for(i=n;i>=1;i--) 
{ if(n==i) 
{ printf("\t\t*\n\n"); 
printf("\t%c\t\t*\n\n",Hfm.c[i]); 
} 
else if(i!=2&&i!=1) 
{ 
for(j=0;j<=n-i;j++) 
printf("\t"); 
printf("%c\t\t*\n\n",Hfm.c[i]); 
} 
else if(i==2) 
{ for(j=0;j<=n-i;j++) 
printf("\t"); 
printf("%c\t\t%c\n\n",Hfm.c[i],Hfm.c[1]); 
} 
else if(i==1) 
printf("\n\n"); 
} 

} 

void Encoding(Huffman Hfm) 
{ 
int i=0,j=0,n; 
char ch[MAX]; 
FILE *fp,*ffp; 
n=Hfm.longth; 
printf("\n*******************编码**************************\n"); 
if((ffp=fopen("ToBeTran.dat","rt"))==NULL) 
{ 
printf("请输入要进行编码的句子: "); 
scanf("%s",&ch); 
printf("\n"); 
fp=fopen("CodeFile.dat","wt+"); 
} 
else 
{ 
fscanf(ffp,"%s",ch); 
fclose(ffp); 
} 
while(ch[j]) 
{ 
for(i=1;i<=n;i++) 
if(ch[j]==Hfm.c[i]) 
{ 
printf("%s",Hfm.HC[i]); 
fprintf(fp,"%s",Hfm.HC[i]); 
break; 
} 
j++; 
} 
rewind(fp); 
fclose(fp); 
} 

void Decoding(Huffman Hfm) 
{
HuffmanTree p; 
int i,n; 
int j=0; 
char d[50]; 
FILE *fp; 
n=Hfm.longth; 
printf("\n******************译码************************\n"); 
if((fp=fopen("CodeFile.dat","rt"))==NULL) 
{ 
printf("输入哈夫曼码进行译码:"); 
scanf("%s",&d); 
} 
else 
{ 
fscanf(fp,"%s",d); 
fclose(fp); 
} 
printf("\n 译码后的句子是: "); 
fp=fopen("TextFile.dat","wt+"); 
while(d[j]) 
{ 
p=&Hfm.HT[2*n-1]; 
while(p->lchild||p->rchild) 
{ 
if(d[j]=='0') 
{ i=p->lchild; p=&Hfm.HT[i]; } 
else 
{ i=p->rchild; p=&Hfm.HT[i]; } 
j++; 
}
printf("%c",Hfm.c[i]); 
fprintf(fp,"%c",Hfm.c[i]); 
} 
fclose(fp); 
} 


int main() 
{ 
Huffman Hfm; 
char choice='a'; 
Hfm=InitHuffman(Hfm); 
while(choice!='q') 
{ 
printf("\n\t\t*************************************\n"); 
printf("\t\t\ta. 编码:\n"); 
printf("\t\t\tb. 译码:\n"); 
printf("\t\t\tc. 打印哈夫曼树以及它的编码规则:\n"); 
printf("\t\t\tq. 退出..."); 
printf("\n\t\t************************************\n"); 
printf("请输入你的选择: "); 
scanf("%s",&choice); 
switch(choice) 
{ 
case 'a': 
Encoding(Hfm); 
getch(); break; 
case 'b': 
Decoding(Hfm); 
getch(); break; 
case 'c': 
Output(Hfm); 
getch(); break; 
case 'q': 
break; 
default: 
printf(" 选择错误!\n"); 
getch(); break; 
} 
} 
return 0; 
} 
