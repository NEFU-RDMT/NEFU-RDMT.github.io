

#include <stdio.h> 
#include <stdlib.h> 
#include <malloc.h>
#include <conio.h>

#define MAX_VERTEX_NUM 50 
#define STACK_SIZE 50 
typedef struct ArcNode{ 
         int adjvex;    
         struct ArcNode *nextarc; 
         }ArcNode;
typedef struct VNode{ 
         int data; 
         ArcNode   *firstarc; 
         }VNode,AdjList[MAX_VERTEX_NUM];
typedef struct { 
         AdjList vertices; 
         int vexnum,arcnum; 
         }ALGraph; 
typedef struct { 
         int *base; 
         int *top; 
         int stacksize; 
         }SqStack;


void InitStack(SqStack *S) 
    { 
         S->base=(int *)malloc(STACK_SIZE*sizeof(int)); 
           if(!S->base) 
                exit(1); 
         S->top=S->base; 
         S->stacksize=STACK_SIZE; 
    } 

void Push(SqStack *S,int e) 
     { 
              if(S->top-S->base>=S->stacksize) 
                    exit(1); 
              *(S->top++)=e; 
     }      


void Pop(SqStack *S,int *e) 
      { 
             if(S->top==S->base) 
                   exit(1); 
              *e=*(--S->top); 
      } 

int StackEmpty(SqStack *S) 
      { 
              if(S->base==S->top) 
                  return 1; 
              else 
                  return 0; 
      }                                                                                                      
 
 void CreatGraph(ALGraph *G) 
        { 
                int i,n,m; 
                ArcNode *p;   
                printf("请输入图的顶点数和边数:"); 
                scanf("%d %d",&G->vexnum,&G->arcnum); 
                for(i=1;i<=G->vexnum;i++)
                     { 
                          G->vertices[i].data=i;

                         G->vertices[i].firstarc=NULL; 
                     } 
                for(i=1;i<=G->arcnum;i++) 
                     {   
                            printf("\n请输入第条%d边的弧头和弧尾:",i); 
                            scanf("%d %d",&n,&m);              
                            while(n<0||n>G->vexnum||m<0||m>G->vexnum) 
                                  { 
                                        printf("\n输入错误，请重新输入:");                                                                            
                                        scanf("%d %d",&n,&m);

      } 
                            p=(ArcNode *)malloc(sizeof(ArcNode));
                            if(!p) 
                               exit(1); 
                            p->adjvex=m; 
                           p->nextarc = G->vertices[n].firstarc;
                            G->vertices[n].firstarc=p; 
                     } 
            
       } 
 
    void FindInDegree(ALGraph G,int indegree[]) 
          { 
                 int i; 
                 for(i=1;i<=G.vexnum;i++) 
                      indegree[i]=0;
                 for(i=1;i<=G.vexnum;i++) 
                      { 
                             while(G.vertices[i].firstarc) 
                                  { 
                                   indegree[G.vertices[i].firstarc->adjvex]++; 
                                    G.vertices[i].firstarc=G.vertices[i].firstarc->nextarc; 
                                  } 
                      }

    } 


void TopologicalSort(ALGraph G) 
       { 
               int indegree[MAX_VERTEX_NUM]; 
               int i,k,n; 
               int count=0; 
               ArcNode *p; 
               SqStack S; 
          FindInDegree(G,indegree); 
          InitStack(&S); 
          for(i=1;i<=G.vexnum;i++) 
              { 
                       if(!indegree[i])
                            Push(&S,i); 
              } 
          printf("拓扑序列是 \n"); 
          while(!StackEmpty(&S))  
		  {          Pop(&S,&n); 
                       printf("->%d",G.vertices[n].data); 
                       count++;
                       for(p=G.vertices[n].firstarc;p!=NULL;p=p->nextarc) 
                             {k=p->adjvex; 
                             if(!(--indegree[k])) 
                              Push(&S,k);
                             } 
                } 
          if(count<G.vexnum) 
                printf("此图有环，无序列!\n"); 
          else 
                printf("\n排序成功!"); 
       }      
        

 

void Menu() 
{ 
printf("\n    拓扑排序\n"); 
printf(" **********************\n"); 
printf("  1.建立新图 \n"); 
printf("  2.进行拓扑排序 \n"); 
printf("  3.退出系统 \n"); 
printf(" **********************\n"); 
 
} 


void main() 
{ 
 int i; 
 ALGraph G; 
 Menu();
scanf("%d",&i); 
while(i!=3) 
{ 
switch(i) 
{ 
case 1:CreatGraph(&G);Menu();break; 
case 2:TopologicalSort(G); Menu();break; 
case 3:exit(1);break; 
default:break; 
} 
scanf("%d",&i); 
}                     
} 

